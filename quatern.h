#define eps  0.0001
#define pi 3.141592653589793238462643
#include<iostream>
#include<vector>
#include<math.h>
#include<assert.h>

using namespace std;

/* --------------------------------------------------
               Функция ввода кватерниона 
   -------------------------------------------------- */
vector<float> setQuat(string);

/* --------------------------------------------------
               Функция ввода вектора
   -------------------------------------------------- */
vector<float> setVect(string);

/* --------------------------------------------
   Вывод содержимого контейнера vector на экран
   -------------------------------------------- */
template<typename T>
void output(T);

/* --------------------------------------------------
   Функция возвращает результат сложения кватернионов
   -------------------------------------------------- */
template<typename T>
T summ(T, T);

/* ---------------------------------------------------
   Функция возвращает результат умножения кватернионов
   --------------------------------------------------- */
template<typename T>
T mult(T, T);

/* --------------------------------------------------
   Функция возвращает результат умножения кватерниона
   -------------------------------------------------- */
template<typename T>
T multC(float, T);

/* ----------------------------------------------------
   Функция возвращает  векторный кватернион, являющийся
   результатом поворота векторного кватерниона v вокруг
   оси единичного кватерниона p=[p1,p2,p3]  на угол phi
   против часовой стрелки
   (кватернионы v и p ортогональны, т.е. (p,v)=0)
   ---------------------------------------------------- */
template<typename T>
T povor1(T, T, float);

/* ----------------------------------------------------
   Функция возвращает  векторный кватернион, являющийся
   результатом поворота векторного кватерниона v вокруг
   оси единичного кватерниона p=[p1,p2,p3] на угол  phi
   против часовой стрелки                              
   (кватернионы v и p не обязательно ортогональны)     
  ----------------------------------------------------- */
template<typename T>
T povor2(T, T, float);

/* ------------------------------------------------------
   Функция возвращает пару                                                                            
   (Угол поворота, Ось поворота)                                                                        
   при выполнении композиции поворотов:                   
   (1) в н а ч а л е  поворот вокруг  оси единичного век-
       торного кватерниона [p11,p12,p13]  на угол  2*phi1
       против часовой стрелки;                           
   (2) з а т е м  поворот вокруг  оси единичного  вектор-
       ного кватерниона [q11,q12,q13] на угол 2*phi2 про-
       тив часовой стрелки                               
    ----------------------------------------------------- */
template<typename T>
pair<float, T> povor3(T, T, float, float);

/* -------------------------------------------------------
   Функция возвращает  р е з у л ь т а т  поворота вектор-
   ного кватерниона v в после применения к нему композиции
   поворотов:                                             
   (1) в н а ч а л е  поворот вокруг оси  единичного век-
       торного кватерниона p на угол 2*phi1 против  часо-
       вой стрелки;                                      
   (2) з а т е м  поворот вокруг  оси единичного  вектор-
       ного кватерниона q на угол 2*phi2  против  часовой
       стрелки.                                                                                               
   Структура результата композиции поворотов:                                                                   
   ((Угол поворота, Ось поворота), Результат поворота)   
   ---------------------------------------------------- */
template<typename T>
pair<pair<float, T> , T> povor4(T, T, float, float, T);


/* -------------------------------------------------------
                 Регресионное тестирование   
   ---------------------------------------------------- */
void test();

/* -------------------------------------------------------
                     Сравнение векторов   
   ---------------------------------------------------- */
template<typename T>
int ifEqualVec(T, T);

/* -------------------------------------------------------
                Сравнение вещественных чисел  
   ---------------------------------------------------- */
int ifEqualNum(float, float);